name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  go-tests:
    name: Go Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: proxy/go.sum

      - name: Download Go dependencies
        working-directory: ./proxy
        run: go mod download

      - name: Run Go tests
        working-directory: ./proxy
        run: go test -v -cover -coverprofile=coverage.out ./...

      - name: Upload Go coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./proxy/coverage.out
          flags: go
          name: go-coverage

  react-tests:
    name: React Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Run React tests
        working-directory: ./web
        run: npm test -- --coverage -- --watchAll=false

      - name: Upload React coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./web/coverage/lcov.info
          flags: react
          name: react-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [go-tests, react-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services
        working-directory: ./compose
        run: |
          docker compose up -d --wait
          sleep 30  # Additional wait for Kafka Connect startup

      - name: Health check proxy
        run: |
          curl -f http://localhost:8080/health || exit 1
          echo "✅ Proxy health check passed"

      - name: Test Kafka Connect API through proxy
        run: |
          curl -f http://localhost:8080/api/default/connector-plugins || exit 1
          echo "✅ Connector plugins API accessible"

      - name: Test cluster metadata endpoint
        run: |
          curl -f http://localhost:8080/api/default/cluster || exit 1
          echo "✅ Cluster metadata API accessible"

      - name: Test monitoring summary endpoint
        run: |
          curl -f http://localhost:8080/api/default/monitoring/summary || exit 1
          echo "✅ Monitoring summary API accessible"

      - name: Show service logs on failure
        if: failure()
        working-directory: ./compose
        run: |
          echo "=== Proxy Logs ==="
          docker compose logs proxy
          echo "=== Kafka Connect Logs ==="
          docker compose logs kafka-connect | tail -50

      - name: Cleanup
        if: always()
        working-directory: ./compose
        run: docker compose down -v

  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run gofmt
        working-directory: ./proxy
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        working-directory: ./proxy
        run: go vet ./...

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Run TypeScript check
        working-directory: ./web
        run: npx tsc --noEmit

      - name: Run ESLint
        working-directory: ./web
        run: npx eslint . --ext .ts,.tsx --max-warnings 0